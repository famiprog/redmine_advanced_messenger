<%= javascript_tag do %>
    const RED = "red";
    const GREEN = "#55CB85";

    function renderExpandCollapseButton(expanded, currentNote, journalId) {
        const cssClass = expanded ? 'icon icon-toggle-minus' : 'icon icon-toggle-plus';
        currentNote.find('.expand-collapse-icon-placeholder').html(
            "<a class='" + cssClass + "' data-remote='true' rel='nofollow' data-method='post' href='/advanced_messenger/" + journalId + "/" + (expanded ? 2 : 1) + "/update_read_by_users'></a>"
        );
    }

     function renderExpandedCollapsed(journalId, expanded, isInitialRender) {
        var currentNote = $("#change-" + journalId + ".journal.has-notes");
        renderExpandCollapseButton(expanded, currentNote, journalId);

        var showOrHideContent = expanded ? "show" : "hide";
        var showOrHidePreview = expanded ? "hide" : "show";

        // ======= Show or hide content ======
        currentNote.find('.wiki .note-content')[showOrHideContent]();

        currentNote.find('.details')[showOrHideContent]();
        // setTimeout is a workarround for:
        // At page load, for collapsed notes with images, even if we hide them they become visible again
        setTimeout(() => currentNote.find('.thumbnails')[showOrHideContent](), isInitialRender && !expanded ? 100 : 0);
        
        // ====== Show or hide preview ======
        currentNote.find('.note-preview')[showOrHidePreview]();
    }

    function renderExpandAndReadIndicatorForCurrentUser (journalId, readByUsers, currentUserId, notesPreview, isInitialRender) {
        var currentNote = $("#change-" + journalId + ".journal.has-notes");
        if (currentNote.length == 0) return;

        const isOfInterestForCurrentUser = readByUsers[currentUserId]?.read != undefined;   
        const isReadByCurrentUser = readByUsers[currentUserId]?.read;
        const collapsed = readByUsers[currentUserId]?.collapsed;

        if (!isOfInterestForCurrentUser && !collapsed || isReadByCurrentUser == 1) {
            renderExpandedCollapsed(journalId, true);
        } else {
            renderExpandedCollapsed(journalId, false, isInitialRender);
        }
        
        // ====== Current user read status + read/unread button ======
        if (isOfInterestForCurrentUser) {
            let span = currentNote.find('.read-unread-indicators-at-right').find('.read_checkbox_placeholder');
            span.html("<span style='padding-right: 5px'> <%=t(:journal_read)%> </span>"
                        + (isReadByCurrentUser ? 
                        "<a class='icon icon-checked-green readButton' data-remote='true' rel='nofollow' data-method='post' href='/advanced_messenger/" + journalId + "/0/update_read_by_users'></a>" 
                      : "<a class='icon icon-unchecked-red unreadButton' data-remote='true' rel='nofollow' data-method='post' href='/advanced_messenger/" + journalId + "/1/update_read_by_users'></a>"));
        }

        // ====== Panel border color ======
        if (!isOfInterestForCurrentUser) {
            currentNote.css({"border-color": "#628DB6"});
        } else if (isReadByCurrentUser == 0) {
             currentNote.css({"border-color": RED});
        } else {
            currentNote.css({"border-color": GREEN});
        }

        // ====== note-preview ======
        renderNotesPreviewContent(journalId, isOfInterestForCurrentUser, isReadByCurrentUser, currentUserId, notesPreview);

    }

    function renderNotesPreviewContent(journalId, isOfInterestForCurrentUser, isReadByCurrentUser, currentUserId, notesPreview) {
        var currentNote = $("#change-" + journalId + ".journal.has-notes");
        const notesPreviewDiv = currentNote.find('.note-preview');
        if (isOfInterestForCurrentUser) {
            if (isReadByCurrentUser) {
                notesPreviewDiv.html("<span class='collapse-note-read-message'><%=t(:journal_collapse_note_message_read)%></span><span class='collapse-note-preview'>" + notesPreview + "...</span>");
            } else {
                notesPreviewDiv.html("<span class='collapse-note-unread-message'><%=t(:journal_collapse_note_message_unread)%></span>");
            }
        } else {
            notesPreviewDiv.html("<span class='collapse-note-message'><%=t(:journal_collapse_note_message)%></span><span class='collapse-note-preview'>" + notesPreview + "...</span>");
        }
    }

    function renderReadIndicatorsForAllUsers(journalId, currentUserId, journalCreationDate, users, readStatuses) {
        var currentNote = $("#change-" + journalId + ".journal.has-notes");
        let userInitials;
        let color;
        let tooltipUserList = "";
        let usersColoredInitials = "<span style='padding-right: 5px'>";
        let isSomeoneInterestedIn = Object.keys(users).length > 0;
        let i = 0;
        for (const [userId, user] of Object.entries(users)) {
            const readStatus = readStatuses[userId] 
            userInitials = user.firstname.charAt(0).toUpperCase() + user.lastname.charAt(0).toUpperCase(); 
            colorStyle = "style='color:" + (readStatus["read"] == 0 ? RED : GREEN) + "'";
            tooltipUserList += "<li " + colorStyle.replace(GREEN, "green") + ">" + userInitials + " - " + user.link +
                                    " (" + (readStatus["read"] == 0 ? "<%=t(:journal_notifications_tooltip_list_item_not_viewed)%>" : readStatus["date"]) + ")" + 
                                "</li>";
            usersColoredInitials +="<span " + colorStyle + ">" + userInitials + "</span>";
            if (i < Object.keys(users).length - 1) {
                usersColoredInitials += ", ";
            }
            i++;
        }
        usersColoredInitials += "</span>";

        const isOfInterestForCurrentUser = false;
        for (const user in users) {
            if (user.id == currentUserId) {
                isOfInterestForCurrentUser = true;
                break;
            }
        }
        if (isSomeoneInterestedIn) {
            const readUnreadIndicators = currentNote.find('.users_initials_and_tooltip_placeholder');
            let tooltipTriggerId = "others-notifications-tooltip-" + journalId;
            const tooltip = "<a id='" + tooltipTriggerId + "' class='icon icon-chat' title=' ' style='cursor: pointer'></a>";
            tooltipTriggerId = "#" + tooltipTriggerId;   

            readUnreadIndicators.html((isOfInterestForCurrentUser ? " | " : "") + usersColoredInitials + tooltip);
            
            // ====== tooltip ======

            $(tooltipTriggerId).tooltip({
                content: function () {
                    return "<div class='ui-helper-clearfix notifications-title'>" +
                                "<span class='ui-button-icon ui-icon ui-icon-closethick notifications-close-button'></span>" +  
                                "<span class='icon icon-chat notifications-title'><%=t(:global_popup_title)%></span>" +
                            "</div>" + 
                            "<div>" + 
                                "<span>" + 
                                    "<%= t(:journal_notifications_tooltip_list_title).html_safe %>".replace("%{date}", journalCreationDate) + 
                                "</span>" + 
                                "<ul>" +
                                    tooltipUserList +
                                "</ul>" +
                            "</div>"; 
                },
                classes: {
                    "ui-tooltip": "journal-notifications-tooltip"
                },
                trigger: "click"
            });

            // ==============================================
            // Logic for tooltip that opens on click, 
            // and that closes when clicking outside or when clicking on a close button 
            // ==============================================    
            
            function closeTooltip() {
                $(tooltipTriggerId).tooltip('close');
                $(tooltipTriggerId).attr('ttVisible','no');
            }

            $(tooltipTriggerId).unbind('mouseover');
            $(tooltipTriggerId).attr('ttVisible','no');
            
            $(tooltipTriggerId).click(function() {
                if($(tooltipTriggerId).attr('ttVisible') == 'no') {
                    
                    // Open the tooltip on click
                    $(tooltipTriggerId).tooltip('open');
                    $(tooltipTriggerId).unbind('mouseleave');
                    $(tooltipTriggerId).attr('ttVisible','yes');

                    // Add handlers for closing the tooltip
                    $(document).on("click", function (event) {
                            // Target is not the tootltip or a child of the tooltip
                            if ($(event.target).closest("#" + $(tooltipTriggerId).data("ui-tooltip-id")).length === 0 && $(event.target).closest(tooltipTriggerId).length === 0) {
                                closeTooltip();
                                $(this).unbind('click', arguments.callee);
                            }
                        }
                    );
                    $("#" + $(tooltipTriggerId).data("ui-tooltip-id") + " .ui-icon-closethick").click(closeTooltip);
                }
            });
        }
    }
<% end %>