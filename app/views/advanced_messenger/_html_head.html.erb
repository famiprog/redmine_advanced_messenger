<%# ============= Plugin styles  ============= %>
<% content_for :header_tags do %>
    <%= stylesheet_link_tag 'advanced_messenger', :plugin => 'redmine_advanced_messenger' %>
<% end %>
<%# ============= Global unread notifications indicator located on main title bar  ============= %>
<%= javascript_tag do%>
    function renderGlobalUnreadNotificationsIndicator(unreadNotificationsCount) {
        const color = unreadNotificationsCount > 0 ? "#ff4545" : "#2bff2b";
        $("#all-unread-notifications-indicator").html("<a href='/my/page'><%=t(:top_app_menu_unread_notifications)%>: <span style='color:" + color + "; font-weight:bold'>" + unreadNotificationsCount + "</span></a>");
    }

    jQuery( document ).ready(function() {
        $("div#loggedas").append("<span id='all-unread-notifications-indicator'><span>");
        renderGlobalUnreadNotificationsIndicator(<%= getUnreadNotificationsForCurrentUserCount()%>);
    });
<% end %>
<%# ============= Helper javascript render methods that are reused in many parts of the application ============= %>
<%
    current_controller = controller.controller_name
    current_action = controller.action_name
%>
<% if current_controller == 'issues' && current_action == 'show' || current_controller == 'messages' && current_action == 'show' %>
    <%= javascript_tag do %>
        const RED = "red";
        const GREEN = "#55CB85";
        const GREY = "#ccc";

        function renderExpandCollapseButton(expanded, currentNode, entityId, endpoint) {
            const cssClass = expanded ? 'icon icon-toggle-minus' : 'icon icon-toggle-plus';
            currentNode.find('.expand-collapse-icon-placeholder').html(
                "<a class='" + cssClass + "' data-remote='true' rel='nofollow' data-method='post' href='/advanced_messenger/" + entityId + "/" + (expanded ? 2 : 1) + "/" + endpoint + "'></a>"
            );
        }

        function renderExpandedCollapsed(entityId, endpoint, currentNode, expanded, isInitialRender) {
            renderExpandCollapseButton(expanded, currentNode, entityId, endpoint);

            var showOrHideContent = expanded ? "show" : "hide";
            var showOrHidePreview = expanded ? "hide" : "show";

            // ======= Show or hide content ======
            currentNode.find('.message-content')[showOrHideContent]();

            currentNode.find('.details')[showOrHideContent]();
            // setTimeout is a workarround for:
            // At page load, for collapsed notes with images, even if we hide them they become visible again
            setTimeout(() => currentNode.find('.thumbnails')[showOrHideContent](), isInitialRender && !expanded ? 100 : 0);
            
            // ====== Show or hide preview ======
            currentNode.find('.message-preview')[showOrHidePreview]();
        }

        function changeReadByUsers(newValue, entityId, endpoint) {
            $.ajax({url:"/advanced_messenger/" + entityId + "/" + newValue + "/" + endpoint, type:"POST"});
        }

        function renderExpandAndReadIndicatorForCurrentUser(readableEntityId, endpoint, currentNode, readByUsers, currentUserId, notesPreview, isInitialRender) {
            if (currentNode.length == 0) return;

            const isOfInterestForCurrentUser = readByUsers[currentUserId]?.read != undefined; 
            const readValue = readByUsers[currentUserId]?.read;
            let color = !isOfInterestForCurrentUser ? "#628DB6" : (readValue == 0 ? RED : (readValue == 3 ? GREY : GREEN)) 
            const collapsed = readByUsers[currentUserId]?.collapsed;

            if (!isOfInterestForCurrentUser && !collapsed || readValue == 1) {
                renderExpandedCollapsed(readableEntityId, endpoint, currentNode, true);
            } else {
                renderExpandedCollapsed(readableEntityId, endpoint, currentNode, false, isInitialRender);
            }
            
            // ====== Current user read status + read/unread button ======
            if (isOfInterestForCurrentUser) {
                let span = currentNode.find('.read-unread-indicators-at-right').find('.read_combobox_placeholder');
                span.html("<select style='color:" + color + ";border-color:" + color + "' onchange=\"changeReadByUsers(this.value," + readableEntityId + " , \'" + endpoint + "\' )\">" + 
                                "<option style='color:red' " + (readValue == 0 ? "selected='selected'" : "") + " value='0'><%=t(:message_unread)%></option>" + 
                                "<option style='color:green' " + (readValue == 1 ? "selected='selected'" : "") + " value='1'><%=t(:message_read)%></option>" +
                                "<option style='color:green' " + (readValue == 2 ? "selected='selected'" : "") + " value='2'><%=t(:message_read_but_collapsed)%></option>" + 
                                "<option style='color:#ccc' " + (readValue == 3 ? "selected='selected'" : "") + " value='3'><%=t(:message_ignored)%></option>" +
                            "</select>");
            }

            // ====== Panel border color ======
            currentNode.css({"border-color": color});
            
            // ====== message-preview ======
            renderNotesPreviewContent(currentNode, isOfInterestForCurrentUser, readValue, currentUserId, notesPreview);

        }

        function renderNotesPreviewContent(currentNode, isOfInterestForCurrentUser, readValue, currentUserId, notesPreview) {
            const notesPreviewDiv = currentNode.find('.message-preview');
            if (isOfInterestForCurrentUser) {
                if (readValue == 0) {
                    notesPreviewDiv.html("<span class='collapse-message-unread'><%=t(:message_collapsed_unread)%></span>");
                } else if (readValue == 3) {
                    notesPreviewDiv.html("<span class='collapse-message-ignored'><%=t(:message_collapsed_ignored)%></span>");
                } else {
                    notesPreviewDiv.html("<span class='collapse-message-read'><%=t(:message_collapsed_read)%></span><span class='collapse-message-preview'>" + notesPreview + "...</span>");
                }
            } else {
                notesPreviewDiv.html("<span class='collapse-message'><%=t(:message_collapsed)%></span><span class='collapse-message-preview'>" + notesPreview + "...</span>");
            }
        }

        function renderReadIndicatorsForAllUsers(readableEntityId, currentNode, currentUserId, creationDate, users, readStatuses) {
            let userInitials;
            let color;
            let tooltipUserList = "";
            let usersColoredInitials = "<span style='padding-right: 5px'>";
            let isSomeoneInterestedIn= Object.keys(users).length > 0;
            let i = 0;
            for (const [userId, user] of Object.entries(users)) {
                const readStatus = readStatuses[userId] 
                userInitials = user.firstname.charAt(0).toUpperCase() + user.lastname.charAt(0).toUpperCase(); 
                colorStyle = "style='color:" + (readStatus["read"] == 0 ? RED : (readStatus["read"] == 3 ? GREY : GREEN)) + "'";
                tooltipUserList += "<li " + colorStyle.replace(GREEN, "green") + ">" + userInitials + " - " + user.link +
                                        " (" + (readStatus["read"] == 0 ? "<%=t(:message_notifications_tooltip_list_item_not_viewed)%>" : readStatus["date"]) + ")" + 
                                    "</li>";
                usersColoredInitials +="<span " + colorStyle + ">" + userInitials + "</span>";
                if (i < Object.keys(users).length - 1) {
                    usersColoredInitials += ", ";
                }
                i++;
            }
            usersColoredInitials += "</span>";

            const isOfInterestForCurrentUser = false;
            for (const user in users) {
                if (user.id == currentUserId) {
                    isOfInterestForCurrentUser = true;
                    break;
                }
            }
            if (isSomeoneInterestedIn) {
                const readUnreadIndicators = currentNode.find('.users_initials_and_tooltip_placeholder');
                let tooltipTriggerId = "others-notifications-tooltip-" + readableEntityId;
                const tooltip = "<a id='" + tooltipTriggerId + "' class='icon icon-chat' title=' ' style='cursor: pointer'></a>";
                tooltipTriggerId = "#" + tooltipTriggerId;   

                readUnreadIndicators.html((isOfInterestForCurrentUser ? " | " : "") + usersColoredInitials + tooltip);
                
                // ====== tooltip ======
                // the `ready` function was needed because otherwise the `show` / `hide` effect didn't had any effect 
                $(document).ready(function() {
                    $(tooltipTriggerId).tooltip({
                        content: function () {
                            return "<div class='ui-helper-clearfix notifications-title'>" +
                                        "<span class='ui-button-icon ui-icon ui-icon-closethick notifications-close-button'></span>" +  
                                        "<span class='icon icon-chat notifications-title'><%=t(:global_popup_title)%></span>" +
                                    "</div>" + 
                                    "<div>" + 
                                        "<span>" + 
                                            "<%= t(:message_notifications_tooltip_list_title).html_safe %>".replace("%{date}", creationDate) + 
                                        "</span>" + 
                                        "<ul>" +
                                            tooltipUserList +
                                        "</ul>" +
                                    "</div>"; 
                        },
                        classes: {
                            "ui-tooltip": "notifications-tooltip"
                        },
                        trigger: "click",
                        show: { delay: 0},
                        hide: { delay: 0},
                    });

                    // ==============================================
                    // Logic for tooltip that opens on click, 
                    // and that closes when clicking outside or when clicking on a close button 
                    // ==============================================    
                    
                    function closeTooltip() {
                        $(tooltipTriggerId).tooltip('close');
                        $(tooltipTriggerId).attr('ttVisible','no');
                    }

                    $(tooltipTriggerId).unbind('mouseover');
                    $(tooltipTriggerId).attr('ttVisible','no');
                    
                    $(tooltipTriggerId).click(function() {
                        if($(tooltipTriggerId).attr('ttVisible') == 'no') {
                            
                            // Open the tooltip on click
                            $(tooltipTriggerId).tooltip('open');
                            $(tooltipTriggerId).unbind('mouseleave');
                            $(tooltipTriggerId).attr('ttVisible','yes');

                            // Add handlers for closing the tooltip
                            $(document).on("click", function (event) {
                                    // Target is not the tootltip or a child of the tooltip
                                    if ($(event.target).closest("#" + $(tooltipTriggerId).data("ui-tooltip-id")).length === 0 && $(event.target).closest(tooltipTriggerId).length === 0) {
                                        closeTooltip();
                                        $(this).unbind('click', arguments.callee);
                                    }
                                }
                            );
                            $("#" + $(tooltipTriggerId).data("ui-tooltip-id") + " .ui-icon-closethick").click(closeTooltip);
                        }
                    });
                });
            }
        }

        function setupPluginPlaceholders(parentDOMNode, headerSelector, contentSelector) {
            parentDOMNode.addClass("advanced-messenger-bordered-panel");

            // ====== Set the placeholders that will contain dynamically render content (that changes without page refresh) ======
            (parentDOMNode.children('.contextual').length == 0) && (parentDOMNode = parentDOMNode.children(':first'));  
            parentDOMNode.children('.contextual').after("<div class='read-unread-indicators-at-right' style='float: right;'><span class='read_combobox_placeholder'></span><span class='users_initials_and_tooltip_placeholder'></span></div>");
            
            const expandCollapse = "<div class='expand-collapse-icon-placeholder'></div>";
            var header = parentDOMNode.children(headerSelector);
            var gravatar = header.find(".gravatar");
            gravatar.length == 0 ? header.prepend(expandCollapse): gravatar.after(expandCollapse);     

            parentDOMNode.children(contentSelector).html("<div class='message-content'>" + parentDOMNode.children(contentSelector).html() + "</div>");
            parentDOMNode.children(contentSelector).append("<p class='message-preview' style='color: rgb(100, 100, 100)'></p>");
        }

        function renderPluginForMessageOrJournal(id, read_by_users, preview, creationDate, messageDOMNode, headerSelector, contentSelector, updateReadByUsersUrl, users, readStatuses) {
            setupPluginPlaceholders(messageDOMNode, headerSelector, contentSelector);
            renderExpandAndReadIndicatorForCurrentUser(id, updateReadByUsersUrl, messageDOMNode, read_by_users, "<%= User.current.id %>", preview, true);     
            renderReadIndicatorsForAllUsers(id, messageDOMNode, "<%= User.current.id %>", creationDate, users, readStatuses);"update_message_read_by_users"
        }
    <% end %>
<% end %>